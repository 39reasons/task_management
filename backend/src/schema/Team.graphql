enum TeamRole {
  owner
  admin
  member
  viewer
}

enum TeamMemberStatus {
  active
  invited
  removed
}

type TeamMember {
  team_id: ID!
  user: User!
  role: TeamRole!
  status: TeamMemberStatus!
  created_at: String
  updated_at: String
}

type Team {
  id: ID!
  project_id: ID!
  name: String!
  description: String
  slug: String!
  created_at: String
  updated_at: String
  role: TeamRole
  members: [TeamMember!]
  project: Project
  boards: [Board!]
  backlogs: [Backlog!]
  sprints: [Sprint!]
  tasks: [Task!]
}

extend type Query {
  teams(project_id: ID): [Team!]!
  team(id: ID!): Team
}

extend type Mutation {
  createTeam(project_id: ID!, name: String!, description: String): Team!
  updateTeam(id: ID!, name: String, description: String): Team!
  deleteTeam(id: ID!): Boolean!
  leaveTeam(team_id: ID!): Boolean!
  removeTeamMember(team_id: ID!, user_id: ID!): Boolean!
}
