type Workflow {
  id: ID!
  name: String!
  project_id: ID!
  stages: [Stage!]!
}

type Stage {
  id: ID!
  name: String!
  position: Int!
  workflow_id: ID!
  tasks: [Task!]!
}

extend type Query {
  workflows(project_id: ID!): [Workflow!]!
  workflow(id: ID!): Workflow
  stages(workflow_id: ID!): [Stage!]!
}

extend type Mutation {
  addStage(workflow_id: ID!, name: String!, position: Int): Stage!
  updateStage(id: ID!, name: String, position: Int): Stage!
  deleteStage(id: ID!): Boolean!
  reorderStages(workflow_id: ID!, stage_ids: [ID!]!): Boolean!
  generateWorkflowStages(input: GenerateWorkflowStagesInput!): [Stage!]!
}

input GenerateWorkflowStagesInput {
  workflow_id: ID!
  prompt: String!
}

enum TaskBoardEventAction {
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  TASK_MOVED
  TASKS_REORDERED
  STAGE_CREATED
  STAGE_UPDATED
  STAGE_DELETED
  STAGES_REORDERED
}

type TaskBoardEvent {
  action: TaskBoardEventAction!
  project_id: ID!
  workflow_id: ID
  stage_id: ID
  previous_stage_id: ID
  task_id: ID
  task_ids: [ID!]
  stage_ids: [ID!]
  origin: String
  timestamp: String
}

extend type Subscription {
  taskBoardEvents(project_id: ID!): TaskBoardEvent!
}
